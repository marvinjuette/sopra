image: gradle:7.6-jdk11

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true -Dorg.gradle.warning.mode=all"

stages:
  - build
  - test
  - deploy
  - pages

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle # Cache dependencies

cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - build
    - .gradle
    - public

compile:
  stage: build
  script:
    - gradle --build-cache clean build dokkaHtml -x test -x detekt -x check

test:
  stage: test
  script:
    - gradle test check
    - gradle detekt
    - gradle detektMain
    - gradle detektTest
    - cat public/coverage/index.html | grep -o 'Total[^%]*' | sed 's/<.*>//; s/Total/COVERAGE=/' >> build.env || true
    - echo "JUNIT=$( cat public/test/index.html | grep -o "percent\">.*%" |  cut -c 10- | rev | cut -c 2- | rev )" >> build.env || true
    - echo "DETEKT_MAIN=$( cat public/detekt/main.html | grep 'Total:\s' | grep -o '[0-9]*' )" >> build.env || true
    - echo "DETEKT_TEST=$( cat public/detekt/test.html | grep 'Total:\s' | grep -o '[0-9]*' )" >> build.env || true
    - echo "UNCOMMENTED_FUNCTIONS_MAIN=$( cat public/detekt/main.html | grep "missing documentation" | wc -l )" >> build.env || true
    - echo "UNCOMMENTED_CLASSES_MAIN=$( cat public/detekt/main.html | grep "missing required documentation" | wc -l )" >> build.env || true
    - echo "UNCOMMENTED_FUNCTIONS_TEST=$( cat public/detekt/test.html | grep "missing documentation" | wc -l )" >> build.env || true
    - echo "UNCOMMENTED_CLASSES_TEST=$( cat public/detekt/test.html | grep "missing required documentation" | wc -l )" >> build.env || true
    - FUNCTIONS_MAIN=$( cat public/detekt/main.html | grep "number of functions</li>" | rev | cut -c 25- | rev | cut -c 9- ) || true
    - CLASSES_MAIN=$( cat public/detekt/main.html | grep "number of classes</li>" | rev | cut -c 24- | rev | cut -c 9- ) || true
    - FUNCTIONS_TEST=$( cat public/detekt/test.html | grep "number of functions</li>" | rev | cut -c 25- | rev | cut -c 9- ) || true
    - CLASSES_TEST=$( cat public/detekt/test.html | grep "number of classes</li>" | rev | cut -c 24- | rev | cut -c 9- ) || true
    - source build.env
    - echo "DOC_COVERAGE_MAIN=$(expr "(" $CLASSES_MAIN "+" $FUNCTIONS_MAIN "-" $UNCOMMENTED_CLASSES_MAIN "-" $UNCOMMENTED_FUNCTIONS_MAIN ")" "*" 100 "/" "(" $CLASSES_MAIN "+" $FUNCTIONS_MAIN")" )" >> build.env || true
    - echo "DOC_COVERAGE_TEST=$(expr "(" $CLASSES_TEST "+" $FUNCTIONS_TEST "-" $UNCOMMENTED_CLASSES_TEST "-" $UNCOMMENTED_FUNCTIONS_TEST ")" "*" 100 "/" "(" $CLASSES_TEST "+" $FUNCTIONS_TEST")" )" >> build.env || true
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - public

deploy-registry:
  image: alpine:latest
  stage: deploy
  script:
    - apk add jq curl
    - PACKAGE_NAME=${CI_PROJECT_PATH////_}
    - echo $PACKAGE_NAME
    - |
      PACKAGE_ID=$(curl -s --header "PRIVATE-TOKEN: $REGISTRY_TOKEN" https://sopra-gitlab.cs.tu-dortmund.de/api/v4/projects/${REGISTRY_ID}/packages?package_name=$PACKAGE_NAME | jq --arg PACKAGE_NAME "$PACKAGE_NAME" '.[] | select(.name == $PACKAGE_NAME) | .id')
    - echo $PACKAGE_ID
    - |
      curl --request DELETE --header "PRIVATE-TOKEN: $REGISTRY_TOKEN" "https://sopra-gitlab.cs.tu-dortmund.de/api/v4/projects/${REGISTRY_ID}/packages/$PACKAGE_ID"
    - |
      curl --header "PRIVATE-TOKEN: $REGISTRY_TOKEN" --upload-file public/distribution.zip "${CI_API_V4_URL}/projects/${REGISTRY_ID}/packages/generic/${PACKAGE_NAME}/1.0/distribution.zip"
  rules:
    - if: $REGISTRY_TOKEN && $REGISTRY_ID && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages:
  image: python:3.9-alpine
  stage: pages
  before_script:
    - pip install anybadge
    - mkdir -p public/badges
    - rm -f public/badges/*
    - apk update && apk add git curl
    - cd public
    - git clone --no-checkout https://gitlab-ci-token:${CI_JOB_TOKEN}@sopra-gitlab.cs.tu-dortmund.de/sopraci/ci-pages-assets.git
    - mv ci-pages-assets/.git/ .
    - git reset --hard HEAD
    - rm -rf .git ci-pages-assets/
    - cd ..
  script:
    - anybadge --label='test coverage' --value=$COVERAGE --suffix='%' --file=public/badges/coverage.svg 50=red 70=orange 85=yellow 100=green
    - anybadge --label='test success' --value=$JUNIT --suffix='%' --file=public/badges/junit.svg 50=red 70=orange 85=yellow 100=green
    - anybadge --label="detekt main" --value=$(expr "(" $DETEKT_MAIN "-" $UNCOMMENTED_CLASSES_MAIN "-" $UNCOMMENTED_FUNCTIONS_MAIN ")" ) --suffix=' warning(s)' --file=public/badges/detekt_main.svg 1=green 2=yellow 6=orange 999=red
    - anybadge --label="detekt test" --value=$(expr "(" $DETEKT_TEST "-" $UNCOMMENTED_CLASSES_TEST "-" $UNCOMMENTED_FUNCTIONS_TEST ")" ) --suffix=' warning(s)' --file=public/badges/detekt_test.svg 1=green 2=yellow 6=orange 999=red
    - anybadge --label="doc main" --value=$DOC_COVERAGE_MAIN --suffix='% complete' --file=public/badges/doc_coverage_main.svg 50=red 70=orange 85=yellow 100=green
    - anybadge --label="doc test" --value=$DOC_COVERAGE_TEST --suffix='% complete' --file=public/badges/doc_coverage_test.svg 50=red 70=orange 85=yellow 100=green
    - curl -X POST -F token=$TRIGGER_TOKEN -F ref=main -F "variables[TASK]=updateAssets" https://sopra-gitlab.cs.tu-dortmund.de/api/v4/projects/243/trigger/pipeline
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - public
